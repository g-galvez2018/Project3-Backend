{"version":3,"sources":["components/user-pages/Signup.js","components/user-pages/Login.js","components/Home.js","components/form-pages/Dropdown-Resource.js","components/form-pages/Dropdown-Client.js","components/tech-pages/AddTicket.js","components/client-pages/Add-Client.js","components/client-pages/Client-List.js","components/client-pages/Edit-Client.js","components/admin-pages/User-List.js","components/admin-pages/Edit-User.js","components/user-pages/Login2.js","App.js","serviceWorker.js","index.js"],"names":["Signup","state","fullName","email","originalPassword","message","event","_event$target","target","name","value","this","setState","Object","defineProperty","_this2","preventDefault","axios","post","concat","process","withCredentials","then","responseFromServer","userDoc","data","props","onUserChange","catch","err","response","_this3","currentUser","react_default","a","createElement","onSubmit","handleSubmit","onChange","genericSync","type","placeholder","Component","Login","console","log","react_router","to","className","Home","DropdownResource","technicians","singleTech","get","techs","e","sendUser","pickupUser","map","user","key","_id","DropdownClient","clients","singleClient","client","accountName","AddTicket","contact","status","priority","issueType","primaryResource","ticketTitle","ticketDescription","isSubmitSuccessful","technician","Dropdown_Client","getClient","Dropdown_Resource","getTech","AddClient","address1","Phone","active","toggleChange","_this","checked","ClientList","clientArray","alert","length","oneClient","react_router_dom","EditClient","params","match","clientId","put","UserList","userArray","oneUser","EditUser","role","userId","Login2","Grid","centered","columns","Column","Header","as","textAlign","Segment","Form","size","Input","fluid","icon","iconPosition","Button","color","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","responseFromBackend","syncCurrentUser","exact","path","component","render","user_pages_Signup","user_pages_Login","Boolean","window","location","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2013c978.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass Signup extends Component {\n  state = {\n     fullName: \"\",\n     email: \"\",\n     originalPassword: \"\",\n     message: null\n  };\n \n  genericSync(event){\n    const { name, value } = event.target;\n    this.setState({ [name]:value });\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    axios.post(\n        `${process.env.REACT_APP_API_URL}/api/signup`, // 1st and mandatory: which route I'm hitting in the backend\n        this.state, // 2nd and mandatory: what I'm sending (since it's POST route I have to send something)\n        { withCredentials:true } // 3rd and optional: credentials:true in CORS\n    )\n    .then( responseFromServer => {\n         //console.log(\"response is: \", responseFromServer);\n        const { userDoc } = responseFromServer.data;\n        this.props.onUserChange(userDoc);\n    } )\n    .catch(err => {\n        // console.log(\"error while signup: \", err);\n        if(err.response && err.response.data){\n            return this.setState({ message:err.response.data.message });\n        }\n    })    \n  }\n\n  render () {    \n    if(this.props.currentUser){\n        return(\n            <section>\n                <h2> You are signed up! </h2>\n                <p> Welcome, { this.props.currentUser.fullName }! \n                    Your email is: <b> { this.props.currentUser.email } </b>\n                </p>\n            </section>\n        )\n   }  \n\n  return (\n    <section>\n       <h2> Sign Up </h2>\n       \n       <form onSubmit={ event => this.handleSubmit(event) } >\n           <label> Full Name </label>\n           <input\n               value = { this.state.fullName }\n               onChange={ event => this.genericSync(event) }\n               type=\"text\"\n               name=\"fullName\"\n               placeholder=\"Miller\"\n           />\n          <label> Email </label>\n           <input\n               value = { this.state.email }\n               onChange={ event => this.genericSync(event) }\n               type=\"email\"\n               name=\"email\"\n               placeholder=\"superstar@ironhack.com\"\n           />\n          <label> Password </label>\n           <input\n               value = { this.state.originalPassword }\n               onChange={ event => this.genericSync(event) }\n               type=\"password\"\n               name=\"originalPassword\"\n               placeholder=\"*******\"\n           />\n           \n           <button> Sign Up </button>\n       </form>\n       {/* if the message is not NULL then show the message */}\n       { this.state.message && <div> { this.state.message } </div> }\n   </section>\n  )\n  }\n}\n\nexport default Signup;\n\n\n\n\n\n\n\n\n","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\n\n\nclass Login extends Component {\n   \n    state = {\n        email: \"\",\n        originalPassword: \"\",\n        message: null,\n    }\n    \n    genericSync(event) {\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n    \n        axios.post(\n            `${process.env.REACT_APP_API_URL}/api/login`,\n            this.state,\n            { withCredentials: true }, // FORCE axios to send cookies across domains\n        )\n        .then(response => {\n            console.log(\"Login Page\", response.data);            \n            const { userDoc } = response.data;\n            // send \"userDoc\" to the App.js function that changes \"currentUser\"\n            this.props.onUserChange(userDoc);\n            console.log('success')\n        })\n        .catch(err => {\n            if (err.response && err.response.data) {\n              // console.error(\"API response\", err.response.data)\n              return  this.setState({ message: err.response.data.message }) \n            }\n        });\n    }\n\n\n\n    render(){\n        // check if currentUser exists and if so, redirect to some other page\n        if(this.props.currentUser){\n            return <Redirect to=\"/\" />\n        }\n        return(\n            <section className=\"LoginPage\">\n                    <h2>Log In</h2>\n\n                    <form onSubmit={event => this.handleSubmit(event)}>\n                        <label> Email:  </label>\n                        <input \n                            value={this.state.email}\n                            onChange={event => this.genericSync(event)}\n                            type=\"email\" \n                            name=\"email\" \n                            placeholder=\"superstar@ironhack.com\" \n                        />\n            \n                        <label> Password: </label>\n                        <input \n                            value={this.state.originalPassword}\n                            onChange={event => this.genericSync(event)}\n                            type=\"password\" \n                            name=\"originalPassword\" \n                            placeholder=\"****\"\n                        />\n                        <button>Log In</button>\n                    </form>\n                    { this.state.message && <div> { this.state.message } </div> }\n            </section>\n        )\n    }\n}\n\nexport default Login;","import React, { Component } from \"react\";\n\nclass Home extends Component {\n   render (){\n       return (\n           <section>\n               <h1> Home Page </h1>\n               <p> Welcome to Iron Task </p>\n           </section>\n       )\n   }\n\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass DropdownResource extends Component {\n  state = {\n    technicians: [],\n    singleTech: \"\",\n  }\n\n  componentDidMount(){\n    axios.get(`${process.env.REACT_APP_API_URL}/api/usersListApi?role=Technician`, { withCredentials:true })\n    .then(techs =>  {              \n      this.setState ({technicians:techs.data.data})        \n    });\n  }\n\n  pickupUser(e){\n    this.props.sendUser(e.target.value)\n  }\n\n  render (){\n    const { technicians } = this.state;\n    return (\n      <div>\n        <select onChange={ e => this.pickupUser(e) } >\n        <option>--Select Technician--</option>\n        { technicians.map(user => <option key={ user._id } value={ user.fullName }> { user.fullName } </option> ) }\n        </select>\n      </div>\n    )\n  }  \n}\n\nexport default DropdownResource;","import React, { Component } from 'react';\n\nimport axios from 'axios';\n\nclass DropdownClient extends Component {\n  state = {\n    clients: [],\n    singleClient: \"\",\n  }\n\n  componentDidMount(){\n    axios.get(`${process.env.REACT_APP_API_URL}/clients/clientListApi`, { withCredentials:true })\n    .then(client =>  {            \n      this.setState ({clients:client.data.data})        \n    });\n  }\n\n  pickupUser(e){\n    this.props.sendUser(e.target.value)\n  }\n\n  render (){\n    const { clients } = this.state;\n    return (\n      <div>\n        <select onChange={ e => this.pickupUser(e) } >\n        <option>--Select Account Name--</option>\n        { clients.map(user => <option key={ user._id } value={ user.accountName }> { user.accountName } </option> ) }\n        </select>\n      </div>\n    )\n  }  \n} \n\n\n\nexport default DropdownClient;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DropdownResource from '../form-pages/Dropdown-Resource';\nimport DropdownClient from '../form-pages/Dropdown-Client';\n\nclass AddTicket extends Component {\n\n  state = {\n    accountName: \"\",\n    contact: \"\",\n    status: \"\",\n    priority: \"\",\n    issueType: \"\",\n    primaryResource: \"\" ,\n    ticketTitle:\"\",\n    ticketDescription: \"\",\n    isSubmitSuccessful: false,  \n  }\n\n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }  \n\n  getClient(client){    \n    this.setState({accountName:client})    \n  }\n\n  getTech(technician){\n    this.setState({ primaryResource: technician})\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n\n    axios.post(\n      `${process.env.REACT_APP_API_URL}/tickets/addTicket`,\n        this.state,\n        { withCredentials: true }\n    )\n    .then( response => {\n        console.log(\"new ticket: \", response.data);\n        this.setState({ isSubmitSuccessful: true })\n    } )\n    .catch( err => console.log(err) );\n  }\n\n  render(){\n    //console.log(\"add ticket comp: \",this.state)\n    return(\n      <section>\n        <h2> Add Ticket</h2>\n        <form onSubmit={ event => this.handleSubmit(event) } >\n          <label> Account Name: </label>\n          <DropdownClient sendUser={ user => this.getClient(user) }  />\n          <br />\n\n          <label> Contact: </label>\n          <input \n              value = { this.state.contact }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"contact\"\n              placeholder = \"\"\n          />\n          <br />\n\n          <label> Status: </label>\n          <select value={ this.state.status } name=\"status\" onChange= { event => this.genericSync(event) } >\n                  <option value=\"--Select Status--\" >--Select Status-- </option>\n                  <option value=\"New\"  > New </option>\n                  <option value=\"In Progress\" > In Progress </option>\n                  <option value=\"Waiting on Customer\" > Waiting on Customer </option>\n                  <option value=\"Complete\" > Complete </option>\n          </select>\n          <br />\n\n          <label> Priority: </label>\n          <select value={ this.state.priority } name=\"priority\" onChange= { event => this.genericSync(event) } >\n                  <option value=\"--Select Priority--\" >--Select Priority-- </option>\n                  <option value=\"Low\"> Low </option>\n                  <option value=\"Medium\"> Medium </option>  \n                  <option value=\"High\"> High </option>                \n          </select>\n          <br />\n\n          <label> Issue Type: </label>\n          <select value={ this.state.issueType } name=\"issueType\" onChange= { event => this.genericSync(event) } >\n                  <option value=\"--Select Issue Type--\" >--Select Issue Type-- </option>\n                  <option value=\"Infrastructure\">Infrastructure</option>\n                  <option value=\"Hardware\"> Hardware </option>  \n                  <option value=\"Software\"> Software </option> \n                  <option value=\"User Administration\"> User Administration </option>               \n          </select>\n           <br />\n\n          <label> Primary Resource: </label> \n          <DropdownResource sendUser={ user => this.getTech(user) }  />\n          <br /> \n\n           <label> Ticket Title: </label>\n            <input \n              value = { this.state.ticketTitle }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"ticketTitle\"\n              placeholder = \"\"\n           />\n           <br />\n\n          <label> Ticket Description: </label>\n            <textarea \n              value = { this.state.ticketDescription }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"ticketDescription\"\n              placeholder = \"\"\n           />\n           <br />\n           <button>Submit</button>        \n        \n        </form>\n      </section>\n    )\n  }\n\n\n\n}\n\nexport default AddTicket;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass AddClient extends Component {\n  state = {\n    accountName:\"\",\n    address1:\"\",\n    Phone:\"\",\n    active:false,    \n    isSubmitSuccessful:false\n  }\n\n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n    //console.log(this.state)\n  } \n\n  toggleChange = () => {\n    this.setState({\n      active: !this.state.active      \n    });\n    //console.log(this.state)\n  }\n\n  handleSubmit(event){\n    event.preventDefault();\n    console.log(this.state)\n    axios.post(\n        `${process.env.REACT_APP_API_URL}/clients/addClient`,\n        this.state,\n        { withCredentials: true }\n    )\n    .then( response => {\n        console.log(\"new client: \", response.data);\n        this.setState({ isSubmitSuccessful: true })\n    } )\n    .catch( err => console.log(err) );\n  }\n\n  render(){\n    return(\n      <section>\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label>Account Name:</label>\n          <input \n              value = { this.state.accountName }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"accountName\"\n              placeholder = \"\"\n           />\n           <br />          \n\n          <label>Address:</label>\n          <input \n              value = { this.state.address1 }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"address1\"\n              placeholder = \"\"\n           />\n           <br />\n\n          <label>Phone:</label>\n          <input \n              value = { this.state.Phone }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"Phone\"\n              placeholder = \"\"\n           />\n           <br />\n\n          <label>Active:</label>\n          <input type=\"checkbox\"\n              name=\"active\"\n              checked={this.state.active}\n              onChange={this.toggleChange}\n          />\n          <br />\n          <button>Submit</button> \n        </form>\n\n      </section>\n    )\n  }\n\n}\n\nexport default AddClient;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\n\nclass ClientList extends Component {\n    state = {\n      clientArray:[]\n    }    \n\n    componentDidMount() {\n      // retrieve the info from the API as soon as the component loads\n      axios.get(\n        `${process.env.REACT_APP_API_URL}/clients/clientList`,\n      { withCredentials: true } // FORCE axios to send cookies across domains\n      )\n      .then(response => {\n          console.log(\"ClientList\", response.data.data);\n          // update our state array with the data from the API\n          this.setState({ clientArray: response.data.data });\n      })\n      .catch(err => {\n          console.log(\"Phone List ERROR\", err);\n          alert(\"Sorry! Something went wrong.\");\n      });\n    }\n\n    \n\n    render(){\n      const { clientArray } = this.state;\n      return(\n        <section>\n          <h2> Clients </h2>\n              <p>Currently we have: { clientArray.length } clients.</p>\n              <ul>\n                    { clientArray.map((oneClient) => {\n                      return(\n                        <li key={ oneClient._id }>\n                            <Link to={`/edit-client/${oneClient._id}`}> \n                              { oneClient.accountName } \n                            </Link>\n                        </li>                  \n                      )\n                    })}\n              </ul>\n\n        </section>\n      )\n    }\n}\n\nexport default ClientList;\n\n","import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass EditClient extends Component {\n  \n  state = {\n      accountName: \"\",\n      address1: \"\",\n      Phone: \"\",\n      active: false        \n  }  \n\n  //Update state of inputs\n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  //Update state of checkbox\n  toggleChange = () => {\n    this.setState({\n      active: !this.state.active      \n    });    \n  }\n\n  componentDidMount() {\n    const { match: { params } } = this.props;\n    //console.log(params.clientId)  \n    axios.get(`${process.env.REACT_APP_API_URL}/clients/clientListEdit/${params.clientId}`)\n    .then(response => {\n      console.log(response.data.data);\n      // update our state array with the data from the API\n      this.setState({ \n                      accountName: response.data.data.accountName,\n                      address1: response.data.data.address1,\n                      Phone:response.data.data.Phone,\n                      active: response.data.data.active\n                    });\n      console.log(this.state)\n    })\n      .catch(err => {\n        //console.log(\"Phone List ERROR\", err);\n        alert(\"Sorry! Something went wrong.\");\n    });\n  }\n\n  handleSubmit(event) {    \n    event.preventDefault(); \n    const { match: { params } } = this.props;\n    console.log(\"submit\", this.state)  \n    axios.put(     \n      `${process.env.REACT_APP_API_URL}/clients/updateClient/${params.clientId}`,\n         this.state,\n        { withCredentials: true }\n    )\n    .then( response => {\n        console.log(\"updated client: \", response.data);        \n    } )\n    .catch( err => console.log(err) );\n     \n  }\n\n  \n\n  render(){    \n    return(\n      <section>\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label>Account Name:</label>\n          <input \n              value = { this.state.accountName }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"accountName\"              \n           />\n           <br />          \n\n          <label>Address:</label>\n          <input \n              value = { this.state.address1 }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"address1\"              \n           />\n           <br />\n\n          <label>Phone:</label>\n          <input \n              value = { this.state.Phone }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"Phone\"              \n           />\n           <br />\n\n          <label>Active:</label>\n          <input type=\"checkbox\"\n              name=\"active\"\n              checked={this.state.active}\n              onChange={this.toggleChange}\n          />\n          <br />\n          <button>Update</button> \n        </form>\n\n      </section>\n    )\n  }\n}\n\nexport default EditClient;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\n\nclass UserList extends Component {\n    state = {\n      userArray:[]\n    }   \n\n    componentDidMount() {\n      // retrieve the info from the API as soon as the component loads\n      axios.get(\n        `${process.env.REACT_APP_API_URL}/api/usersList`,\n        { withCredentials: true } // FORCE axios to send cookies across domains\n      )\n      .then(response => {\n          console.log(\"UserList\", response.data.data);\n          // update our state array with the data from the API\n          this.setState({ userArray: response.data.data });\n      })\n      .catch(err => {\n          console.log(\"User List ERROR\", err);\n          alert(\"Sorry! Something went wrong.\");\n      });\n    }    \n\n    render(){\n      const { userArray } = this.state;\n      return(\n        <section>\n          <h2> Users </h2>\n              <p>Currently we have: { userArray.length } users.</p>\n              <ul>\n                    { userArray.map((oneUser) => {\n                      return(\n                        <li key={ oneUser._id }>\n                            <Link to={`/edit-user/${oneUser._id}`}> \n                              { oneUser.fullName } \n                            </Link>\n                        </li>                  \n                      )\n                    })}\n              </ul>\n\n        </section>\n      )\n    }\n}\n\nexport default UserList;","import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass EditUser extends Component {\n  \n  state = {\n      fullName: \"\",\n      email:\"\",\n      status: \"\",\n      role: \"\",             \n  }  \n\n  //Update state of inputs\n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n\n  componentDidMount() {\n    const { match: { params } } = this.props;\n    //console.log(params.clientId)  \n    axios.get(`${process.env.REACT_APP_API_URL}/api/profile/${params.userId}`)\n    .then(response => {\n      console.log(\"response\",response.data.data);\n      // update our state array with the data from the API\n      this.setState({ \n                      fullName: response.data.data.fullName,\n                      email: response.data.data.email,\n                      status:response.data.data.status,\n                      role: response.data.data.role\n                    });\n      console.log(this.state)\n    })\n      .catch(err => {        \n        alert(\"Sorry! Something went wrong.\");\n    });\n  }\n\n  handleSubmit(event) {    \n    event.preventDefault(); \n    const { match: { params } } = this.props;\n    console.log(\"pre-submit\", this.state)  \n    axios.put(     \n        `${process.env.REACT_APP_API_URL}/api/updateUser/${params.userId}`,\n         this.state,\n        { withCredentials: true }\n    )\n    .then( response => {\n        console.log(\"updated user: \", response.data.data);        \n    } )\n    .catch( err => console.log(err) );\n     \n  }  \n\n  render(){    \n    return(\n      <section>\n        <form onSubmit={event => this.handleSubmit(event)}>\n          <label>User Name:</label>\n          <input \n              value = { this.state.fullName }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"fullName\"              \n           />\n           <br />          \n\n          <label>User Email:</label>\n          <input \n              value = { this.state.email }\n              onChange={ e => this.genericSync(e) }\n              type = \"text\"\n              name = \"email\"              \n           />\n           <br />\n\n          <label>Role:</label>\n          <select value={ this.state.role } name=\"role\" onChange= { event => this.genericSync(event) } >                  \n                  <option value=\"Admin\"> Admin </option>\n                  <option value=\"Technician\">Technician</option>\n                  <option value=\"Client\"> Client </option> \n          </select>          \n          <br />\n          <label>Status:</label>\n          <select value={ this.state.status } name=\"status\" onChange= { event => this.genericSync(event) } >                  \n                  <option value=\"Pending\">Pending</option>\n                  <option value=\"Active\">Active</option>\n                  <option value=\"Inactive\">Inactive</option> \n          </select>\n          <br />\n          \n          <button>Update</button> \n        </form>\n\n      </section>\n    )\n  }\n}\n\nexport default EditUser;","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport {\n  Button,\n  Form,\n  Grid,\n  Header,  \n  Segment,\n} from 'semantic-ui-react';\n\nclass Login2 extends Component {\n\n  state = {\n    email: \"\",\n    originalPassword: \"\",\n    message: null,\n  }\n\n  genericSync(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    axios.post(\n        `${process.env.REACT_APP_API_URL}/api/login`,\n        this.state,\n        { withCredentials: true }, // FORCE axios to send cookies across domains\n    )\n    .then(response => {\n        console.log(\"Login Page\", response.data);            \n        const { userDoc } = response.data;\n        // send \"userDoc\" to the App.js function that changes \"currentUser\"\n        this.props.onUserChange(userDoc);\n        console.log('success')\n    })\n    .catch(err => {\n        if (err.response && err.response.data) {\n          // console.error(\"API response\", err.response.data)\n          return  this.setState({ message: err.response.data.message }) \n        }\n    });\n  }\n\n  render() {\n    return(\n        <Grid centered columns={2}>\n          <Grid.Column>\n            <Header as=\"h2\" textAlign=\"center\">\n              Login\n            </Header>\n            <Segment>\n              <Form size=\"large\" onSubmit={event => this.handleSubmit(event)}>\n                <Form.Input\n                  fluid\n                  icon=\"user\"\n                  iconPosition=\"left\"\n                  placeholder=\"Email address\"\n                  value={this.state.email}\n                  onChange={event => this.genericSync(event)}\n                  type=\"email\" \n                  name=\"email\"                            \n                />\n                <Form.Input\n                  fluid\n                  icon=\"lock\"\n                  iconPosition=\"left\"\n                  placeholder=\"Password\"\n                  type=\"password\"\n                  value={this.state.originalPassword}\n                  onChange={event => this.genericSync(event)}\n                  name=\"originalPassword\"                            \n                />\n\n                <Button color=\"blue\" fluid size=\"large\">\n                  Login\n                </Button>\n              </Form>\n            </Segment>      \n          </Grid.Column>\n        </Grid>\n    )}\n}\n\nexport default Login2;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { Switch, NavLink, Route } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\nimport Signup from './components/user-pages/Signup';\nimport Login from './components/user-pages/Login';\nimport Home from './components/Home';\nimport AddTicket from './components/tech-pages/AddTicket'\nimport AddClient from './components/client-pages/Add-Client'\nimport ClientList from './components/client-pages/Client-List'\nimport EditClient from './components/client-pages/Edit-Client'\nimport UserList from './components/admin-pages/User-List'\nimport EditUser from './components/admin-pages/Edit-User'\nimport Login2 from './components/user-pages/Login2'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      currentUser: null,\n      role: \"\"\n    }\n  }\n\n  componentDidMount(){\n    axios.get(`${process.env.REACT_APP_API_URL}/api/checkuser`, { withCredentials:true })\n    .then(responseFromBackend => {\n     console.log(\"Check User in APP.JS: \",responseFromBackend.data.userDoc)\n      const { userDoc } = responseFromBackend.data;\n      //console.log(\"userDoc\", userDoc.role)\n      this.syncCurrentUser(userDoc);\n    });\n  }\n\n  // this is the method for updating \"currentUser\"\n  // (must be defined in App.js since it's the owner of \"currentUser\" now)\n  syncCurrentUser(user){\n    this.setState({ currentUser: user });\n    //this.setState({role: this.state.currentUser.role})\n    //console.log(\"usuario\",this.state.currentUser.role)\n  }\n\n\n  render() {\n    //const {role} = this.state.currentUser\n   // console.log(role)\n    return (\n      <div className=\"App\">\n        <header>\n         <h1> Iron Task </h1>\n         <nav>\n          {/* Home will be always visible to everyone */}\n            <NavLink to=\"/\"> Home </NavLink>\n\n          { (this.state.role === \"Client\") ? \n            // these pages will be visible only if the user exists\n            <span>\n              <NavLink to=\"/client-list\">Client List </NavLink>\n              <NavLink to=\"/user-list\">User List </NavLink>\n              <NavLink to=\"/add-client\"> Add Client </NavLink>\n              <NavLink to=\"/signup-page\"> Signup </NavLink>\n              <NavLink to=\"/login-page2\"> Login Page 2 </NavLink>\n            </span>\n          : \n            // these pages will be visible only if there is no user in the session\n            <span>\n              <NavLink to=\"/signup-page\"> Signup </NavLink>\n              <NavLink to=\"/login-page\"> Login </NavLink>\n              <NavLink to=\"/add-ticket\"> Add Ticket </NavLink>\n              <NavLink to=\"/login-page2\"> Login Page 2 </NavLink>\n              <NavLink to=\"/client-list\">Client List </NavLink>\n              <NavLink to=\"/user-list\">User List </NavLink>\n            </span>\n           }\n           \n         </nav>\n        </header>\n\n        <Switch>\n          {/* this is example how to normally do the Route: */}\n          {/* <Route path=\"/somePage\" component={ someComponentThatWillRenderWhenUSerClickThisLink }   /> */}\n          <Route exact path=\"/\" component={ Home } />\n\n\n         {/* this way we use when we are passing params down to componentDidMount() {\n           so we can't use component={}, but instead we have to use render ={() => <someComponent/>}\n         }\n          */}\n          <Route path=\"/signup-page\" render={ () => \n            <Signup currentUser={this.state.currentUser} \n            onUserChange={ userDoc => this.syncCurrentUser(userDoc) }   />\n          }  />\n\n          \n          <Route path=\"/login-page\" render={ () => \n            <Login currentUser={ this.state.currentUser } \n            onUserChange={userDoc => this.syncCurrentUser(userDoc)} />\n          }  />\n\n          <Route path=\"/add-ticket\" component={ AddTicket }/>\n          <Route path=\"/add-client\" component={ AddClient }/>\n          <Route path=\"/client-list\" component={ ClientList }/>\n          <Route path=\"/edit-client/:clientId\" component={ EditClient }/>\n          <Route path=\"/user-list\" component={ UserList }/>\n          <Route path=\"/edit-user/:userId\" component={ EditUser }/>\n          <Route path=\"/login-page2\" component={ Login2 }/>\n          \n        </Switch>\n\n        \n\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from \"react-router-dom\"; \n\nReactDOM.render(\n  <BrowserRouter>\n      <App />\n  </BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}